name: SonarCloud analysis and Deployment
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
permissions:
  pull-requests: read
  checks: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: npm install
      - name: Build Next.js project
        run: npm run build
      - name: Run tests with coverage
        run: npm test -- --coverage --testResultsProcessor=jest-sonar-reporter
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .

      - name: Debug test outputs
        run: ls -R . | grep test-report.xml && ls coverage/

      - name: Wait for jenkins to succeed
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Jenkins
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Do something with a passing build
        if: steps.wait-for-build.outputs.conclusion == 'success'
        run: echo "Build succeeded!  Ready to deploy..."

      - name: Setup SSH for EC2
        uses: omarhosny206/setup-ssh-for-ec2@v1.0.0
        with:
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_KEY }}
          EC2_URL: ${{ secrets.EC2_HOST }}

      - name: Deploy to EC2
        if: steps.wait-for-build.outputs.conclusion == 'success'
        env:
          EC2_USER: ${{secrets.EC2_USER}}
          REPO_NAME: "ci-cd"
          SERVICE_PATH: ""
        run: |
          echo "Deploying to EC2..."
          ssh -o StrictHostKeyChecking=no $EC2_USER@${{ secrets.EC2_HOST }} "cd $REPO_NAME && git fetch origin && git reset --hard origin/main"
          ssh -o StrictHostKeyChecking=no $EC2_USER@${{ secrets.EC2_HOST }} "cd $REPO_NAME && docker-compose down && docker-compose up -d"
          ssh -o StrictHostKeyChecking=no $EC2_USER@${{ secrets.EC2_HOST }} "docker system prune -f"
          echo "Deployment successful!"

      - name: Do something with a failing build
        if: steps.wait-for-build.outputs.conclusion == 'failure'
        run: |
          echo "Build failed!  See the build logs for details."
          exit 1
